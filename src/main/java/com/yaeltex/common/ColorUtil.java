package com.yaeltex.common;

import java.util.HashMap;
import java.util.Map;

import com.bitwig.extension.api.Color;

public class ColorUtil {
    
    private static final Map<Integer, Integer> codeLookup = new HashMap<>();
    
    private static final int[][] colorRangeTable = {
        //  R       G       B
        {0x00, 0x00, 0x00},
        // 00
        {0xf2, 0xc, 0xc},
        {0xf2, 0x58, 0x58},
        {0xf2, 0xa5, 0xa5},
        {0xf2, 0x2c, 0xc},
        {0xf2, 0x6e, 0x58},
        {0xf2, 0xb0, 0xa5},
        {0xf2, 0x4d, 0xc},
        {0xf2, 0x84, 0x58},
        {0xf2, 0xbb, 0xa5},
        {0xf2, 0x6e, 0xc},
        // 10
        {0xf2, 0x9a, 0x58},
        {0xf2, 0xc6, 0xa5},
        {0xf2, 0x8f, 0xc},
        {0xf2, 0xb0, 0x58},
        {0xf2, 0xd1, 0xa5},
        {0xf2, 0xb0, 0xc},
        {0xf2, 0xc6, 0x58},
        {0xf2, 0xdc, 0xa5},
        {0xf2, 0xd1, 0xc},
        {0xf2, 0xdc, 0x58},
        // 20
        {0xf2, 0xe7, 0xa5},
        {0xf2, 0xf2, 0xc},
        {0xf2, 0xf2, 0x58},
        {0xf2, 0xf2, 0xa5},
        {0xd1, 0xf2, 0xc},
        {0xdc, 0xf2, 0x58},
        {0xd1, 0xf2, 0xa5},
        {0xb0, 0xf2, 0xc},
        {0xc6, 0xf2, 0x58},
        {0xb0, 0xf2, 0xa5},
        // 30
        {0x8f, 0xf2, 0xc},
        {0xb0, 0xf2, 0x58},
        {0x8f, 0xf2, 0xa5},
        {0x6e, 0xf2, 0xc},
        {0x9a, 0xf2, 0x58},
        {0x6e, 0xf2, 0xa5},
        {0x4d, 0xf2, 0xc},
        {0x84, 0xf2, 0x58},
        {0x4d, 0xf2, 0xa5},
        {0x2c, 0xf2, 0xc},
        // 40
        {0x6e, 0xf2, 0x58},
        {0x2c, 0xf2, 0xa5},
        {0xc, 0xf2, 0xc},
        {0x58, 0xf2, 0x58},
        {0xc, 0xf2, 0xa5},
        {0xc, 0xf2, 0x2c},
        {0x58, 0xf2, 0x6e},
        {0xc, 0xf2, 0xb0},
        {0xc, 0xf2, 0x4d},
        {0x58, 0xf2, 0x84},
        // 50
        {0xc, 0xf2, 0xbb},
        {0xc, 0xf2, 0x6e},
        {0x58, 0xf2, 0x9a},
        {0xc, 0xf2, 0xc6},
        {0xc, 0xf2, 0x8f},
        {0x58, 0xf2, 0xb0},
        {0xc, 0xf2, 0xd1},
        {0xc, 0xf2, 0xb0},
        {0x58, 0xf2, 0xc6},
        {0xc, 0xf2, 0xdc},
        // 60
        {0xc, 0xf2, 0xd1},
        {0x58, 0xf2, 0xdc},
        {0xc, 0xf2, 0xe7},
        {0xc, 0xf2, 0xf2},
        {0x58, 0xf2, 0xf2},
        {0xc, 0xf2, 0xf2},
        {0xc, 0xd1, 0xf2},
        {0x58, 0xdc, 0xf2},
        {0xc, 0xe7, 0xf2},
        {0xc, 0xb0, 0xf2},
        // 70
        {0x58, 0xc6, 0xf2},
        {0xc, 0xdc, 0xf2},
        {0xc, 0x8f, 0xf2},
        {0x58, 0xb0, 0xf2},
        {0xc, 0xd1, 0xf2},
        {0xc, 0x6e, 0xf2},
        {0x58, 0x9a, 0xf2},
        {0xc, 0xc6, 0xf2},
        {0xc, 0x4d, 0xf2},
        {0x58, 0x84, 0xf2},
        // 80
        {0xc, 0xbb, 0xf2},
        {0xc, 0x2c, 0xf2},
        {0x58, 0x6e, 0xf2},
        {0xc, 0xb0, 0xf2},
        {0xc, 0xc, 0xf2},
        {0x58, 0x58, 0xf2},
        {0xc, 0xa5, 0xf2},
        {0x2c, 0xc, 0xf2},
        {0x6e, 0x58, 0xf2},
        {0x2c, 0xa5, 0xf2},
        // 90
        {0x4d, 0xc, 0xf2},
        {0x84, 0x58, 0xf2},
        {0x4d, 0xa5, 0xf2},
        {0x6e, 0xc, 0xf2},
        {0x9a, 0x58, 0xf2},
        {0x6e, 0xa5, 0xf2},
        {0x8f, 0xc, 0xf2},
        {0xb0, 0x58, 0xf2},
        {0x8f, 0xa5, 0xf2},
        {0xb0, 0xc, 0xf2},
        // 100
        {0xc6, 0x58, 0xf2},
        {0xb0, 0xa5, 0xf2},
        {0xd1, 0xc, 0xf2},
        {0xdc, 0x58, 0xf2},
        {0xd1, 0xa5, 0xf2},
        {0xf2, 0xc, 0xf2},
        {0xf2, 0x58, 0xf2},
        {0xf2, 0xa5, 0xf2},
        {0xf2, 0xc, 0xd1},
        {0xf2, 0x58, 0xdc},
        // 110
        {0xf2, 0xa5, 0xe7},
        {0xf2, 0xc, 0xb0},
        {0xf2, 0x58, 0xc6},
        {0xf2, 0xa5, 0xdc},
        {0xf2, 0xc, 0x8f},
        {0xf2, 0x58, 0xb0},
        {0xf2, 0xa5, 0xd1},
        {0xf2, 0xc, 0x6e},
        {0xf2, 0x58, 0x9a},
        {0xf2, 0xa5, 0xc6},
        // 120
        {0xf2, 0xc, 0x4d},
        {0xf2, 0x58, 0x84},
        {0xf2, 0xa5, 0xbb},
        {0xf2, 0xc, 0x2c},
        {0xf2, 0x58, 0x6e},
        {0xf2, 0xa5, 0xb0},
        {0xf0, 0xf0, 0xf0}
    };
    
    public static Color getColor(final int index) {
        return Color.fromRGB255(colorRangeTable[index][0], colorRangeTable[index][1], colorRangeTable[index][2]);
    }
    
    private static int restrict(final int value) {
        return Math.max(0, Math.min(255, value));
    }
    
    public static int matchToIndex(final double r, final double g, final double b) {
        final int rv = (int) Math.floor(r * 255);
        final int gv = (int) Math.floor(g * 255);
        final int bv = (int) Math.floor(b * 255);
        final int code = rv << 16 | gv << 8 | bv;
        return codeLookup.computeIfAbsent(code, key -> matchToIndex(rv, gv, bv));
    }
    
    public static int matchToIndex(final int red, final int green, final int blue) {
        if (red == 0 && green == 0 && blue == 0) {
            return 0;
        }
        int rv = red;
        int gv = green;
        final int bv = blue;
        
        //SeqArp168Extension.println("LOOK %d %d %d", rv, gv, bv);
        if (red == green && green == blue) {
            return 127;
        }
        
        gv = restrict(gv + 8);
        rv = restrict(rv - 8);
        
        int currDiff = 1000;
        int index = -1;
        for (int i = 0; i < 128; i++) {
            final int dr = Math.abs(rv - colorRangeTable[i][0]);
            final int dg = Math.abs(gv - colorRangeTable[i][1]);
            final int db = Math.abs(bv - colorRangeTable[i][2]);
            
            final int diff = dr + dg + db;
            
            if (diff < currDiff) {
                currDiff = diff;
                index = i;
                if (currDiff == 0) {
                    return i;
                }
            }
        }
        if (index != -1) {
            return index;
        }
        
        return 127;
    }
    
    public static String getValue(final int index) {
        return "%02x %02x %02x".formatted(colorRangeTable[index][0], colorRangeTable[index][1],
            colorRangeTable[index][2]);
    }
}
