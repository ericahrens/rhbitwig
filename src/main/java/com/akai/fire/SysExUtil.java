package com.akai.fire;

import java.util.ArrayList;
import java.util.List;

public class SysExUtil {
	public static final int[] PLASTIKMAN_LOGO = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
			0xF0, 0xF8, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0,
			0xF8, 0xFC, 0xFE, 0xFF, 0x7F, 0x3F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x03, 0x03, 0x03, 0x03, 0x07, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00,
			0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80,
			0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFE,
			0xFF, 0xFF, 0xFF, 0x3F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xC0,
			0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xC0, 0xC0, 0xE0, 0xF0, 0xFC, 0x3F, 0x1F, 0x1F, 0xFF,
			0xFF, 0x7F, 0xBF, 0x8F, 0x07, 0x80, 0xE0, 0xF0, 0xF0, 0x30, 0x80, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x0F,
			0x07, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x07, 0x0F, 0x1F, 0x1F, 0x1F,
			0x0F, 0x07, 0x00, 0x00, 0x00, 0x07, 0x0F, 0x1F, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x1F, 0x7F, 0xFF, 0xFF, 0xFC, 0xE0, 0x80, 0xC0, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x07, 0x7F, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFC, 0xE0, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x1E, 0x0E,
			0x06, 0x03, 0x01, 0x1E, 0xBF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFD, 0xFE, 0xDF, 0xFF, 0xFF, 0x9F, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x38, 0x7C, 0xFE, 0xFE,
			0xFE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x38, 0x7C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x38, 0x7C, 0xFE,
			0xFE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x38, 0x7C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x38, 0x7C,
			0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xEF, 0xC0, 0x80, 0x00, 0x00,
			0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xFC,
			0xFC, 0xF8, 0xF8, 0xF8, 0xFC, 0x7E, 0x3F, 0x1F, 0x0F, 0x0F, 0x3F, 0x3F, 0x3F, 0x3F, 0x03, 0x07, 0x07, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF1, 0xF1, 0xF1, 0xE0, 0xC0, 0x00, 0x00, 0xC0, 0xE0,
			0xF1, 0xF1, 0xF1, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF1, 0xF1, 0xF1, 0xE0, 0xC0, 0x00, 0x00,
			0xC0, 0xE0, 0xF1, 0xF1, 0xF1, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0xC7, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xF7, 0xDF, 0x1F,
			0x0E, 0x00, 0x00, 0x01, 0x07, 0x1F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0xFF, 0xFF, 0xE1, 0xE1, 0xF1, 0xF1, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF8, 0xFE, 0x7E, 0x7E, 0x3C, 0x1C,
			0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00,
			0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x03,
			0x00, 0x00, 0x03, 0x07, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x3F, 0x3F, 0x3F, 0x1F, 0x03, 0x3F, 0x3F, 0x1F, 0x8F,
			0xC3, 0xC0, 0xE0, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0xC0, 0xE1, 0xE3, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 0x0F, 0x0F, 0xC7, 0xF3, 0xFD, 0x7F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x66, 0x66, 0x66, 0x66, 0x7E, 0xDC,
			0x80, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x06, 0x06, 0x06, 0xFE, 0xFE, 0x06, 0x06, 0x06, 0x00, 0x00, 0x0E,
			0x7E, 0xF8, 0xF0, 0x80, 0xF8, 0x7E, 0x1E, 0xFC, 0xE0, 0x80, 0xF8, 0xFE, 0x1E, 0x00, 0x00, 0x00, 0xFE, 0xFE,
			0x00, 0x00, 0xF8, 0xFC, 0x0E, 0x06, 0x06, 0x66, 0x66, 0x66, 0xE6, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C,
			0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3E, 0x3D, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x37, 0x33,
			0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C,
			0x0C, 0x0F, 0x07, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00 };

	public static final int[] EMPTY_SCREEN = new int[1024];

	static {
		for (int i = 0; i < EMPTY_SCREEN.length; i++) {
			EMPTY_SCREEN[i] = 0;
		}
	}

	public static byte[] toBytePack(final int[] values) {
		final List<Byte> blist = new ArrayList<>();

		int prev = -1;
		int bitOffset = 0;
		for (int i = 0; i < values.length; i++) {
			final int v = values[i];
			if (bitOffset == 0) {
				blist.add(Byte.valueOf((byte) (v >> 1 & 0x7F)));
			} else {
				final int mask = (1 << bitOffset) - 1;
				final int b1 = (prev & mask) << 7 - bitOffset;
				final int b2 = v >> bitOffset + 1;
				blist.add(Byte.valueOf((byte) (b1 | b2)));
			}
			prev = v;
			if (bitOffset == 6 || i == values.length - 1) {
				bitOffset++;
				final int mask = (1 << bitOffset) - 1;
				final int b1 = (prev & mask) << 7 - bitOffset;
				blist.add(Byte.valueOf((byte) b1));
				bitOffset = 0;
			} else {
				bitOffset++;
			}
		}
		final byte[] rese = new byte[blist.size()];
		for (int i = 0; i < rese.length; i++) {
			rese[i] = blist.get(i).byteValue();
		}
		return rese;
	}

}
